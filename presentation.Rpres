<style>
body {
    overflow: scroll;
}
</style>
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo =FALSE, cache = FALSE, message = FALSE,
                      warning = FALSE, fig.align = 'center')
```
Analysis of the Influeces Between Programming Languages 
========================================================
author: Eros Fabrici
date: 15/02/2021
autosize: true
width: 2160
height: 1440

Table of Content
========================================================

- Introduction
- Data
- Question Addressed
- Network Analysis
- Conclusions
- References

Introduction
========================================================

- Programming languages evolved with a really fast pace over the decades
- A study [1] showed that their evolution is uneven, as opposed to biological systems, and related to technological advances
- With this project we aim to answer some questions by using Network Science 


Data
========================================================

- The [dataset](https://royalsocietypublishing.org/action/downloadSupplement?doi=10.1098%2Frsif.2015.0249&file=rsif20150249supp1.pdf) can be found in the [ICON](https://icon.colorado.edu/#!/) website
- It represents a directed graph, which describes the influences between the programming languages released between 1952 and 2010
- It has 395 nodes and 762 edges
- It is not connected: there are 6 weak components and 29 isolated nodes
- The semantic is the following:
Let $u, v \in V$ two programming languages (nodes) and if $\exists (u, v) \in E$ then this means that the programming language
$u$ is influenced by $v$


=======================================================
```{r}
knitr::include_graphics('plots/network.png')
```


Questions
========================================================

- The aim of this project is to answer the following questions by analysing the network:
    + What are the most influential programming languages?
    + Which are the most influenced?
    + Are the programming languages of the same paradigm family more influenced between each other rather than the others belonging to other paradigms?
    

Network Analysis
========================================================

## Most influential programming languages
- In order to evaluate which are the most influential and influenced programming languages, we will use centrality metrics
- The metrics shown for the first case are: in-degree, in-closeness, pagerank and betweenness


========================================================
```{r}
knitr::include_graphics('plots/degree_in.png')
```


========================================================
```{r}
knitr::include_graphics('plots/hist_degree_in.png')
```


========================================================
```{r}
knitr::include_graphics('plots/closeness_in.png')
```


=======================================================
```{r}
knitr::include_graphics('plots/hist_closeness_in.png')
```


=======================================================
```{r}
knitr::include_graphics('plots/pagerank.png')
```


=======================================================
```{r}
knitr::include_graphics('plots/hist_pagerank.png')
```


=======================================================
```{r}
knitr::include_graphics('plots/betweenness.png')
```


=======================================================
```{r}
knitr::include_graphics('plots/hist_betweenness.png')
```

Network Analysis (2)
=======================================================
## Most Influenced Programming languages
- Listed: out-degree

=======================================================
```{r}
knitr::include_graphics('plots/degree_out.png')
```


=======================================================
```{r}
knitr::include_graphics('plots/hist_degree_out.png')
```

Network Analysis (3)
=======================================================
## Community detection
- In order to tackle the third objective of this project, community detection algorithms were used
- The aim is to check if you can identify clusters that contain programming languages of the same/similar paradigm
- Before analysing the network, isolated nodes were removed
- Unfortunately, in `igraph` the modularity is implemented only for undirected graphs
    + One possibility is to transform all the edges to undirected, but we would lose some information [2]
    + There are a lot of techniques to deal directed graphs, one of these is the information-theoretic one [2]
    + In fact, the `infomap` algorithm yielded good results
    
    
=======================================================
```{r}
knitr::include_graphics('plots/communities.png')
```


Conclusions
=======================================================
- We can distinguish two types of influence, the *direct* and *historical*
- It is possible to capture communities that matches with programming paradigms

References
=======================================================

- [1] Valverde S, Sol√© RV. 2015 Punctuated equilibrium in the large-scale evolution of programming languages. J. R. Soc. Interface 12: 20150249. http://dx.doi.org/10.1098/rsif.2015.0249
- [2] Malliaros, Fragkiskos & Vazirgiannis, Michalis. (2013). Clustering and Community Detection in Directed Networks: A Survey. Physics Reports. 533. 10.1016/j.physrep.2013.08.002. 
